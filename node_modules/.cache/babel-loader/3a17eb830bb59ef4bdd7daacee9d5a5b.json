{"ast":null,"code":"var _jsxFileName = \"/Users/ravivadukul/Desktop/React/Cocktail/src/contect.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('a');\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n\n      if (drinks) {\n        const newCocktails = drinks.map(item => {\n          const {\n            idDrink,\n            strDrink,\n            strDrinkThumb,\n            strAlcoholic,\n            strGlass\n          } = item;\n          return {\n            id: idDrink,\n            Name: strDrink,\n            image: strDrinkThumb,\n            information: strAlcoholic,\n            glass: strGlass\n          };\n        });\n        setCocktails(newCocktails);\n      } else {\n        setCocktails([]);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      searchTerm,\n      setSearchTerm\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppProvider, \"pVduyyrEviwdo90SgUZ1eiRIAnA=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","newCocktails","map","item","idDrink","strDrink","strDrinkThumb","strAlcoholic","strGlass","id","Name","image","information","glass","error","console","log","useGlobalContext"],"sources":["/Users/ravivadukul/Desktop/React/Cocktail/src/contect.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s='\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n    const [loading, setLoading] = useState(false)\n    const [searchTerm, setSearchTerm] = useState('a')\n    const [cocktails, setCocktails] = useState([])\n    \n    const fetchDrinks = async () => {\n        setLoading(true)\n        try {\n            const response = await fetch(`${url}${searchTerm}`)\n            const data = await response.json()\n            const {drinks} = data\n            if(drinks) {\n                const newCocktails = drinks.map((item) => {\n                    const {\n                        idDrink,\n                        strDrink,\n                        strDrinkThumb,\n                        strAlcoholic,\n                        strGlass,\n                      } = item\n                return {id : idDrink , Name : strDrink , image : strDrinkThumb , information : strAlcoholic , glass : strGlass}      \n                })\n                setCocktails(newCocktails)\n            }else {\n                setCocktails([])\n            }\n            setLoading(false)\n        } catch (error) {\n            console.log(error); \n            setLoading(false)  \n        }\n    } \n\n    useEffect(() => {\n        fetchDrinks()\n    },[searchTerm])\n\n    return (\n        <AppContext.Provider value={{ loading, cocktails, searchTerm, setSearchTerm }}>\n          {children}\n        </AppContext.Provider>\n      )\n}\n\n\nexport const useGlobalContext = () => {\n    return useContext(AppContext)\n  }\n  \n  export { AppContext, AppProvider }"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA,MAAMC,UAAU,gBAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAClC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,GAAD,CAA5C;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;;EAEA,MAAMe,WAAW,GAAG,YAAY;IAC5BL,UAAU,CAAC,IAAD,CAAV;;IACA,IAAI;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,GAAEO,UAAW,EAArB,CAA5B;MACA,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;MACA,MAAM;QAACC;MAAD,IAAWF,IAAjB;;MACA,IAAGE,MAAH,EAAW;QACP,MAAMC,YAAY,GAAGD,MAAM,CAACE,GAAP,CAAYC,IAAD,IAAU;UACtC,MAAM;YACFC,OADE;YAEFC,QAFE;YAGFC,aAHE;YAIFC,YAJE;YAKFC;UALE,IAMAL,IANN;UAOJ,OAAO;YAACM,EAAE,EAAGL,OAAN;YAAgBM,IAAI,EAAGL,QAAvB;YAAkCM,KAAK,EAAGL,aAA1C;YAA0DM,WAAW,EAAGL,YAAxE;YAAuFM,KAAK,EAAGL;UAA/F,CAAP;QACC,CAToB,CAArB;QAUAd,YAAY,CAACO,YAAD,CAAZ;MACH,CAZD,MAYM;QACFP,YAAY,CAAC,EAAD,CAAZ;MACH;;MACDJ,UAAU,CAAC,KAAD,CAAV;IACH,CApBD,CAoBE,OAAOwB,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAxB,UAAU,CAAC,KAAD,CAAV;IACH;EACJ,CA1BD;;EA4BAR,SAAS,CAAC,MAAM;IACZa,WAAW;EACd,CAFQ,EAEP,CAACJ,UAAD,CAFO,CAAT;EAIA,oBACI,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAE;MAAEF,OAAF;MAAWI,SAAX;MAAsBF,UAAtB;MAAkCC;IAAlC,CAA5B;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA1CD;;GAAMD,W;;KAAAA,W;AA6CN,OAAO,MAAM8B,gBAAgB,GAAG,MAAM;EAAA;;EAClC,OAAOpC,UAAU,CAACI,UAAD,CAAjB;AACD,CAFI;;IAAMgC,gB;;AAIX,SAAShC,UAAT,EAAqBE,WAArB"},"metadata":{},"sourceType":"module"}