/// <reference types="react" />
export declare type GlobalContextReducers = {
    [partial in string]: {
        reducer: AnyReducer;
        initialState: Record<string, any>;
    };
};
export declare type AnyReducer<S = any, A = any> = React.Reducer<S, A> | React.ReducerWithoutAction<S>;
export declare type ReducerState<R> = R extends React.ReducerWithoutAction<any> ? React.ReducerStateWithoutAction<R> : R extends React.Reducer<any, any> ? React.ReducerState<R> : never;
export declare type ReducerDispatch<R> = R extends React.ReducerWithoutAction<any> ? React.DispatchWithoutAction : R extends React.Reducer<any, any> ? React.Dispatch<React.ReducerAction<R>> : never;
export declare type State<T extends GlobalContextReducers> = {
    [P in keyof T]: T[P]['initialState'];
};
export declare type Dispatch<T extends GlobalContextReducers> = {
    [P in keyof T]: ReducerDispatch<T[P]['reducer']>;
};
export declare type PartialState<T extends GlobalContextReducers> = {
    [P in keyof State<T>]?: Partial<State<T>[P]>;
};
export declare type GlobalContextValue<T extends GlobalContextReducers> = {
    state: State<T>;
    dispatch: Dispatch<T>;
};
